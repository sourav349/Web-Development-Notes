CSS Overview : Cascading Style Sheets (CSS) is used to style the visual presentation of HTML documents, such as text colors, layout, and background styling.

Basic CSS Syntax: h1 {
  color: red; /* Property: color, Value: red */
}
- h1 is the selector.
- color is the property.
- red is the value.

Types of CSS :-
1. Inline Styles: Applied directly within HTML elements.
      <h3 style="color: rgb(8, 5, 86)">Stuti Gupta</h3>
2. Internal Styles: Defined within the <style> tag inside the HTML <head>.
      <style>
          h3 { color: red; }
      </style>
3. External Styles: Stored in a separate .css file, linked to the HTML file.
      <link rel="stylesheet" href="style.css">

Text Properties:- 
1. Text Alignment : text-align: left | right | center | justify;
2. Font Weight : font-weight: normal | bold | 100 | bolder;
3.  Decoration : text-decoration: none | underline | overline | line-through;
4. Line Height : line-height: normal | 2.5;
5.Letter Spacing : letter-spacing: normal | 10px;
6. Font Size : font-size: 16px | 120% | 1.2em;
7. Font Family : font-family: Arial, sans-serif;
8. Text Transform : text-transform: uppercase | lowercase | capitalize;
9. Selectors :
Universal Selector : * { property: value; }
Element Selector : h1 { color: red; }   h1, h3 { color: red; }
ID Selector : #idselector { color: red; }
Class Selector : .myclass { property: value; } .class a { property: value; }
Descendant Selector : div p { property: value; }
Adjacent Sibling Selector : p + h3 { property: value; }
Child Selector : span > button { property: value; }
Attribute Selector : input[attr="value"] { property: value; }
                     input[type] { property: value; }
10. Pseudo-Classes :
:hover            button:hover { background-color: black; color: white; }
:active           button:active { background-color: hotpink; }
:checked          input[type="radio"]:checked + label { color: red; font-weight: bold; }
:nth-of-type(n)   div:nth-of-type(2) { property: value; }
Pseudo-Elements : 
::first-letter
::first-line
::selection
Note: If there is a flask icon in front of any MDN code, it means the feature is experimental and should not be used in production projects.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CSS Cascade : It is a set of rules that decides which styles apply when multiple styles target the same element. It helps determine which CSS rule takes priority.

How the Cascade Works? : When multiple styles apply to the same element, the browser follows three main rules to decide which style is applied:
1. Origin & Importance : CSS can come from different sources:
    Browser Default Styles (User Agent Stylesheet)
    Your CSS Code (Author Stylesheet)
    User-defined Styles (User Stylesheet)

Priority order :
!important rules from the user stylesheet (highest priority)
!important rules from your CSS (author stylesheet)
Normal rules from your CSS
Normal rules from the user stylesheet
Browser default styles (lowest priority)
Example :h3 { color: white !important; } Even if h3 is styled multiple times, this !important rule will always be applied.

2. Specificity : If multiple rules apply to the same element, the browser calculates a "specificity score" to decide which rule wins.
Specificity scores : Inline styles (style="color: red;") ‚Üí Highest (1,0,0,0)
                     ID selectors (#id) ‚Üí (0,1,0,0)
                     Class selectors (.class), attributes ([attr]), and pseudo-classes (:hover) ‚Üí (0,0,1,0)
                     Element selectors (h1, p) and pseudo-elements (::before) ‚Üí Lowest (0,0,0,1)

3. Source Order (Last Rule Wins) : If two rules have the same importance and specificity, the rule that appears last in the CSS file will be applied.
CSS conflicts are resolved in the following order : Importance (!important rules win)
                                                    Specificity (More specific rules win)
                                                    Source Order (Later rules win if all else is equal)
Understanding these rules helps in writing clear and predictable CSS styles.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CSS Inheritance : It allows certain properties to be passed down from a parent element to its child elements, reducing redundant styling and maintaining consistency.  
How Inheritance Works? : Not all CSS properties are inherited. Inheritance mostly applies to text-related properties, while box-related properties do not inherit by default.  
1. Inherited Properties (Text-Related) :  These properties are inherited automatically :  
- `color`, `font`, `visibility`, `letter-spacing`, `word-spacing`, `direction`, `cursor`, `line-height`  
2. Non-Inherited Properties (Box & Layout-Related) : By default, these properties are not inherited :  
- `width`, `height`, `margin`, `padding`, `border`, `background`, `display`, `flex`, `grid`, `input`, `button`, etc.  
3. Forcing Inheritance : CSS provides special values to control inheritance:  
- `inherit` ‚Üí Forces an element to inherit the property from its parent.  
  ```css
  input { background-color: inherit; } 
- `initial` ‚Üí Resets the property to its default browser-defined value.  
- `unset` ‚Üí Acts as `inherit` for inheritable properties and `initial` for non-inheritable ones.  
This mechanism helps streamline styling while giving flexibility where needed. üöÄ

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CSS Box Model : The Box Model in CSS defines how elements are structured and spaced, consisting of four key parts: **Content, Padding, Border, and Margin**.  
1. Height & Width :  
- Height : Default is `100px` (unless overridden).  
- Width : Defines the element's width.  
2. Border : Defines the element's outline with properties:  
- `border-width`, `border-style`, `border-color`  
- Shorthand : 
  ```css
  div { border: 2px solid blue; }
3. Padding :   
Spacing inside the border, between the content and the border.  
- Shorthand : 
  ```css
  padding: 5px;          /* All sides */
  padding: 1px 2px;      /* Top & Bottom | Left & Right */
  padding: 1px 2px 3px;  /* Top | Left & Right | Bottom */
  padding: 1px 2px 3px 4px; /* Top | Right | Bottom | Left */
4. Margin
Spacing **outside** the border, controlling the gap between elements.  
- **Shorthand:** *(Same as padding shorthand)*  
5. Border Sides : To style specific sides:  
```css
border-left: 2px solid red;
border-top-color: blue;
6. Border Radius : Rounds the element's corners:  
```css
div { border-radius: 15px; } /* All corners */
div { border-radius: 50%; }  /* Circular shape */
div { border-top-right-radius: 50px; } /* Specific corner */
üöÄ The Box Model helps in structuring layouts effectively!

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
CSS display properties : CSS defines how elements behave using **display properties**, categorizing them as **block**, **inline**, or **inline-block** elements.  
1. Block Elements :   - Occupy the **full width** available and start on a **new line**.  
                      - Respect `width` and `height` properties.  
                      - Both **horizontal & vertical margins** work.  
                      - Example: `<div>`, `<p>`, `<h1>`, `<section>`.  

2. Inline Elements :   - Occupy only the **necessary width** and do **not start a new line**.  
                       - **Horizontal margins work**, but **vertical margins do not**.  
                       - `padding` applies on all sides, but top/bottom padding **may overlap** other elements.  
                       - Example: `<span>`, `<a>`, `<strong>`.  

3. Display Property : Controls how an element behaves in the layout:  
```css
display: block; /* Makes an element behave as a block */
display: inline; /* Makes an element behave as an inline element */
display: inline-block; /* Mix of both inline & block properties */

                Inline vs. Inline-Block
 Feature            `inline`         `inline-block` |
|------------------ --------------- ---------------|
| Respects width/height | ‚ùå No | ‚úÖ Yes |
| Stays on the same line | ‚úÖ Yes | ‚úÖ Yes |
| Allows padding & margin | ‚úÖ (partial) | ‚úÖ (full) |
| Supports vertical alignment | ‚ùå No | ‚úÖ Yes |

4. Special Cases :   - `<span>` ignores height & width** when set to `display: inline`, and padding only applies horizontally.  
                      -  Unordered lists (`<ul>`) lose bullet points** when `display: inline` is applied, requiring additional styling to restore them.  
Using `inline-block` helps structure flexible layouts while keeping elements in the same line!**

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Essential CSS Concepts : 
1. `display: none` vs. `visibility: hidden`**  
- `display: none;` **hides** an element **completely**‚Äîit **does not take up space** in the layout.  
- `visibility: hidden;` hides the element but **still occupies space** on the page.  
2. `em` vs. `rem` (Font Sizing Units)**  
| Unit  | Relative To  | Behavior |
|-------|------------|-----------|
| `1em`  | Parent element‚Äôs font size | Can cause **compounding (snowball effect)** when nested. |
| `1rem` | Root `<html>` font size | Prevents compounding, ensuring consistency. |  
üìå Example : If `<html>` has `font-size: 16px`, then:  
- `1em = 16px` (relative to the parent)  
- `1rem = 16px` (always relative to root)  
3. Alpha Channel (Opacity in Colors) :  Controls transparency in **RGBA** and **Hexadecimal** colors.In **Hex**, `00` (fully transparent) to `FF` (fully opaque). 
  ```css
  rgba(255, 255, 255, 0.3); /* White with 30% opacity */
4. CSS Transitions (Smooth Animation) : Enable smooth property changes over time.  
```css
transition: margin-top 2s ease-in-out 0.2s;  
üìå Shorthand Format :  `property | duration | timing-function | delay`  
5. CSS Transform (Element Manipulation) : Used to rotate, scale, skew, and translate elements.  
```css
transform: rotate(45deg); /* Clockwise rotation */
transform: scale(2, 0.5); /* Scale: 2x width, 0.5x height */
transform: translate(50px, 20px) skew(20deg, 10deg);  /* Moves element, then skews */
*6. `box-shadow` (Shadow Effects) :  
```css
box-shadow: 2px 2px 10px green;  /* X-offset | Y-offset | Blur radius | Color */
7. `background-image` (Setting Background Images) 
```css
background-image: url("image.jpg");
background-size: contain | cover | auto;
- `contain` ‚Üí Fits the image inside the container **without cropping** (may leave gaps).  
- `cover` ‚Üí Scales the image to **fill the container**, cropping if needed.  
- `auto` (default) ‚Üí Keeps original size (may cause stretching).  
üìå Use Cases :  ‚úî `contain` ‚Üí When full image visibility is needed.  
                ‚úî `cover` ‚Üí When filling the container without gaps is preferred.  
üöÄ These properties help create responsive and visually appealing designs!

-------------------------------------------------------------------------------------------------------------------------------------------------------

CSS Positioning Types :   
1Ô∏è‚É£ Static (Default) :   - Normal flow : The element follows the document‚Äôs default flow.  
                        - No effect from `top`, `bottom`, `left`, `right` properties.  
- Example :  
  ```css
  .element { position: static; top: 50px; left: 20px; }
  üìå Use Case : Default behavior for elements that don‚Äôt need custom placement.
2Ô∏è‚É£ Relative : 
- Normal flow : The element remains in the document flow.  
- Movable : You can adjust its position using `top`, `bottom`, `left`, `right` relative to its original position.  
- Example :  
  ```css
  .element { position: relative; top: 20px; left: 30px; }
  üìå Use Case : Slight adjustments without affecting surrounding elements.
3Ô∏è‚É£ Absolute :  - Removed from flow : Positioned relative to the nearest positioned ancestor (relative, absolute, or fixed).  
                - If no positioned ancestor exists, it‚Äôs placed relative to `<html>`.  
- Example :  
  ```css
  .container { position: relative; }
  .element { position: absolute; top: 50px; left: 100px; }
  üìå Use Case : Positioning elements like tooltips, dropdowns, or popups inside a specific container.
4Ô∏è‚É£ Fixed : - Removed from flow : Positioned relative to the viewport (browser window).  
            - Stays fixed even when the page is scrolled.  
- Example :  
  ```css
  .element { position: fixed; top: 0; right: 0; width: 100px; height: 50px; background: red; }
  üìå Use Case : Sticky headers, floating buttons, or back-to-top buttons.  
This overview helps in choosing the right positioning for elements based on layout needs! üöÄ

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Flexbox : A 1D Layout Model for Responsive Design,It is a layout model used to arrange items in rows or columns with dynamic sizing. It allows flexible and efficient alignment and distribution of space among items, even when their sizes change.
Key Concepts : - Flex Container : The parent element that holds the flex items.
               - Flex Items : The child elements inside the flex container.
               - Main Axis : The axis along which flex items are arranged (by default, horizontally).
               - Cross Axis : The axis perpendicular to the main axis (by default, vertically).
Display: flex  - Enables Flexbox : Applies the Flexbox layout model to the container, making its children flexible.  
               - Default Direction : Items are arranged in a row (horizontal).  
- Syntax :  
  ```css
  .container { display: flex; }
Flex Direction : Sets the direction of flex items within the container :
- row (default) : Items arranged horizontally (main axis: left to right).
- row-reverse : Items arranged horizontally (main axis: right to left).
- column : Items arranged vertically (main axis: top to bottom).
- column-reverse : Items arranged vertically (main axis: bottom to top).

Justify Content : Aligns items along the main axis :
- flex-start : Aligns items to the start (left for row, top for column).
- flex-end : Aligns items to the end (right for row, bottom for column).
- center : Aligns items in the center.
- space-between : Distributes space evenly between items, with no space at the edges.
- space-around : Distributes space evenly around each item, with half the space at the edges.
- space-evenly : Even space between all items, including the edges.

Flex Wrap :  Controls item wrapping within the container :
- nowrap (default): Items stay in a single line, causing overflow if necessary.
- wrap : Items wrap to the next line if there‚Äôs not enough space.
- wrap-reverse: Items wrap in reverse order (e.g., new lines appear above previous ones).

Align Items : Aligns items along the cross axis :
- flex-start : Aligns items at the start (top for row, left for column).
- flex-end : Aligns items at the end (bottom for row, right for column).
- center : Centers items along the cross axis.
- baseline : Aligns items based on their baseline (useful for text).
- stretch : Stretches items to fill the container (if space allows).

Align Content : Aligns multiple lines of items along the cross axis (only when wrapping is enabled):
              - Functions similarly to justify-content but for multiple lines.

Align Self :  Overrides default alignment for a single item along the cross axis:
- auto : Follows the alignment set by align-items.
- flex-start : Aligns to the start (top for row, left for column).
- flex-end : Aligns to the end (bottom for row, right for column).
- center : Centers the item along the cross axis.
- stretch : Stretches the item to fill the container.
- baseline : Aligns the item to the baseline.

Flex Sizing : Controls how items grow, shrink, and take up space in the container:
- flex-grow : Defines how much an item can grow (default is 0, it doesn‚Äôt grow unless specified).
- flex-shrink : Defines how much an item can shrink (default is 1, it will shrink if necessary).
- flex-basis : Defines the initial size of an item (can be a specific value like 100px or auto).

Shorthand: `flex` Property : Sets the three flex sizing properties in one line:
- flex : `<flex-grow> <flex-shrink> <flex-basis>`  or  flex : `<flex-grow> <flex-basis>`
  Example:
  ```css
  .item { flex: 1 0 100px; }  /* Grow 1, don‚Äôt shrink, initial size 100px */
Flexbox simplifies layouts by allowing flexible arrangement and distribution of items. It‚Äôs especially useful for responsive designs, where the layout adjusts to the available space. Use properties like `justify-content`, `align-items`, and `flex` to control item positioning and size dynamically.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

What Does `margin: 0 auto;` Do in CSS?**  
The CSS property `margin: 0 auto;` is used to **center block-level elements horizontally** within their container.  
How It Works? :   
- `0` ‚Üí Sets **top and bottom margins** to `0`.  
- `auto` ‚Üí Distributes **equal left and right margins**, centering the element horizontally.  
- Note : It works **only if the element has a defined width**.  
Example : This will center `.container` horizontally within its parent.
```css
.container {
    width: 50%;  /* Required for centering */
    margin: 0 auto;
    background-color: lightblue;
    text-align: center;
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Grid : 
